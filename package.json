{
  "displayName": "Unity Physics",
  "category": "Unity",
  "description": "Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# ECS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.",
  "dependencies": {
    "com.unity.burst": "1.8.8",
    "com.unity.collections": "2.3.0-exp.1",
    "com.unity.entities": "1.1.0-exp.1",
    "com.unity.mathematics": "1.2.6",
    "com.unity.test-framework": "1.3.8",
    "com.unity.modules.imgui": "1.0.0",
    "com.unity.modules.jsonserialize": "1.0.0"
  },
  "keywords": [
    "unity",
    "physics"
  ],
  "name": "com.unity.physics",
  "unity": "2022.3",
  "unityRelease": "0f1",
  "version": "1.1.0-exp.1",
  "samples": [
    {
      "displayName": "Custom Physics Authoring",
      "description": "Provides a custom authoring experience for creating rigid bodies and colliders for Unity Physics.",
      "importPath": "Authoring",
      "path": "Samples~/CustomPhysicsAuthoring"
    }
  ],
  "_upm": {
    "changelog": "### Added\n\n* Tests for ensuring proper joint anchor and mass property baking\n* new demo scene (5m. Collider Modifications) demonstrating how to create colliders during runtime\n* Utility functions were added for the creation of MeshCollider blob assets from UnityEngine.Mesh, UnityEngine.MeshData and UnityEngine.MeshDataArray. These functions are located in the MeshCollider class as `MeshCollider.Create' variants with different function signatures.\n* Users can now verify if a collider blob is unique, and make it unique easily if required. The newly introduced `PhysicsCollider.IsUnique` property lets users check if a `PhysicsCollider` is unique and turn it into a unique collider if desired via the function `PhysicsCollider.MakeUnique()`. Making a collider unique with this function also takes care of the collider blob lifetime management and will automatically dispose it if it is no longer needed.\n* Added a custom entity inspector for the collider blob asset stored in the `PhysicsCollider` component. This inspector allows for two-way interaction with the collider. The displayed values update in accordance with the collider's latest runtime state, and the UI can be used in order to interact with the collider manually when it is unique (see `PhysicsCollider.IsUnique`). Among others, this lets users try out different material properties at runtime, such as friction and restitution, or modify the collider's size, local position or orientation.\n\n### Changed\n\n* Changed the `bool` flags in the `Physics Debug Display` authoring component for drawing colliders, collider edges and axis-aligned bounding boxes of colliders to an enum called `DisplayMode`. With the display mode you can now choose whether to draw these elements at the beginning of the simulation step or at the end of the simulation step after the rigid bodies have been integrated, meaning, they have been moved forward in time.\n* Convert SystemBase to ISystems.\n* Joint baking for built-in 3D physics joints has been improved, leading to the expected simulation results. Now, when the `Spring` and `Damping` properties in Configurable and Character Joints are both set to 0 for limits, a hard limit is modeled. This is equivalent to the behavior in built-in 3D physics. Also, the `Damping` parameter is now correctly converted from damping coefficient to the Unity Physics damping ratio for joints, yielding the correct damping force. Furthermore, joint baking now considers the scale of game objects. Anchor points are now affected by the scale accordingly.\n* The formula which converts the user-specified joint relaxation parameters (spring frequency and damping ratio) to the internal constraint regularization parameters (tau and damping) was rewritten as an optimized closed-form expression with constant time complexity. The regularization parameters can now be efficiently computed regardless of the chosen solver iteration count.\n* `PhysicsGraphicalSmoothing` has been added to `.WithAll<>()` from `.WithAllRW<>()` in the `SmoothedDynamicBodiesQuery` variable within `SmoothRigidBodiesGraphicalMotion.cs` system file.\n* Updating APIs to `GetScriptingDefineSymbols()` and `SetScriptingDefineSymbols()`.\n* Included ragdoll authoring in documentation\n* Prefab instances will now contain unique colliders if the \"force unique\" collider authoring option is used. This allows collider runtime modifications without manual collider blob cloning now also on prefab instances. Note that prefab instances that contain \"force unique\" colliders will be made unique only after the next physics system group update following the prefab instantiation. Until then, the `PhysicsCollider.IsUnique` property will be false. If users require a unique collider immediately after prefab instantiation for runtime collider modifications, they can safely use the new `PhysicsCollider.MakeUnique()` function immediately after instantiation.\n* Updated Burst dependency to version 1.8.8\n* The internal component `DrawComponent`, required by the `Physics Debug Display`, is now hidden in the hierarchy.\n\n### Deprecated\n\n* The `Constraint.DefaultSpringDamping` variable was deprecated. Use `Constraint.DefaultDampingRatio` instead. The same applies to the `Constraint.SpringDamping` property which was deprecated. Instead the new `Constraint.DampingRatio` property should be used.\n\n### Removed\n\n* Remove unused internal debug draw functionalities which were causing slowdowns during world initialization\n\n### Fixed\n\n* BuildCompoundCollidersBakingSystem no longer leaks memory when the world is disposed.\n* Convert SystemBase to ISystems\n* When using the built-in `Rigidbody` and `Collider` authoring components, the inertia tensor of the resultant rigid body in Unity Physics is now set correctly in all situations. Previously, in certain cases, the default inertia tensor was used.\n* A problem which prevented the solver to respect the user-specified joint spring frequency and damping ratios in certain cases has been fixed, enabling physically-plausible modeling of joints under all operating conditions.\n* Link to changelog in documentation now fixed\n* Physics Shape components with type Mesh now correctly only use the Custom Mesh for MeshCollider creation if specified rather than also incorrectly including the game object's render mesh and any render mesh found in the game object's children. The previous erroneous behavior could lead to significant performance problems in the narrow phase (contact creation) of the physics simulation group for affected meshes.\n* Updated documentation to reflect that the Built-In TerrainCollider is not yet supported by Unity Physics"
  },
  "upmCi": {
    "footprint": "742197017da611bedbebad5ba50b0c9395fa0a0b"
  },
  "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.physics@1.1/manual/index.html",
  "repository": {
    "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
    "type": "git",
    "revision": "c3274ed2015eeec85914d62bfbd32e39f0dd112b"
  }
}
